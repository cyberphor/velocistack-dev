services:
  postgres: # database
    profiles: [ "velocistack", "intelowl", "postgres" ]
    build: postgres
    image: postgres:dev
    container_name: postgres
    hostname: postgres
    env_file: .env
    volumes:
      - postgres:/var/lib/postgresql/data/
    ports:
      - "5432:5432"
  intelowl: # Web Server Gateway Interface between Nginx and Intel Owl (a Python/Django-based app)
    profiles: [ "velocistack", "intelowl" ]
    build: intelowl
    image: intelowl:dev
    container_name: intelowl
    hostname: intelowl
    env_file: .env
    volumes:
      - logs:/var/log/intel_owl
      - web:/opt/deploy/intel_owl/static
    ports:
      - "8008:8008"
    depends_on:
      - postgres 
  rabbitmq: # message/task broker between front-end (Nginx/uWSGI) and back-end (Celery); task results > postgres
    profiles: [ "velocistack", "intelowl", "rabbitmq" ]
    build: rabbitmq
    image: rabbitmq:dev
    container_name: rabbitmq
    hostname: rabbitmq
    env_file: .env
    ports:
      - "5672:5672"
      - "15672:15672"
  celery-beat: # schedules tasks for Intel Owl
    profiles: [ "velocistack", "intelowl", "celery-beat" ]
    build: celery-beat
    image: celery-beat:dev
    container_name: celery-beat
    hostname: celery-beat
    env_file: .env
    volumes:
      - logs:/var/log/intel_owl
      - shared:/opt/deploy/files_required
    depends_on:
      - postgres
      - rabbitmq
      - intelowl
  celery-worker: # off-loads tasks for Intel Owl
    profiles: [ "velocistack", "intelowl" ]
    build: celery-worker
    image: celery-worker:dev
    container_name: celery-worker
    hostname: celery-worker
    env_file: .env
    volumes:
      - logs:/var/log/intel_owl
      - shared:/opt/deploy/files_required
    depends_on:
      - rabbitmq
      - postgres
  velociraptor: 
    profiles: [ "velocistack", "velociraptor" ]
    build: velociraptor
    image: velociraptor:dev
    container_name: velociraptor
    hostname: velociraptor
    env_file: .env
    volumes:
      - velociraptor_data:/opt/velociraptor/:rw
      - velociraptor_api:/api/
    ports:
      - "8000:8000"
      - "8001:8001"
      - "8889:8889"
  nginx: # front-end web server
    profiles: [ "velocistack", "intelowl", "iris", "prometheus" ]
    build: nginx
    image: nginx:dev
    container_name: nginx
    hostname: nginx
    volumes:
      - certs:/etc/nginx/ssl
      - logs:/var/log/nginx
      - web:/var/www/static
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - intelowl # upstream server needs to be up first for redirection
      - velociraptor # upstream server needs to be up first for redirection
  elasticsearch:
    profiles: [ "velocistack", "elastic" ]
    build: elasticsearch
    image: elasticsearch:dev
    container_name: elasticsearch
    hostname: elasticsearch
    env_file: .env
    volumes:
      - certs:/usr/share/elasticsearch/config/certs/
    ports:
      - "9200:9200"
    networks: 
      velocistack:
        ipv4_address: ${ES_IP}
    healthcheck:
      test: ["CMD-SHELL", "curl ${ES_HOST} --cacert ${ES_PUBLIC_KEY} -u ${ELASTIC_USERNAME}:${ELASTIC_PASSWORD}"]
      start_period: 10s
      retries: 3
      interval: 5s
      timeout: 3s
  kibana:
    profiles: [ "velocistack", "elastic" ]
    depends_on:
      elasticsearch:
        condition: service_healthy
    build: kibana
    image: kibana:dev
    container_name: kibana
    hostname: kibana
    env_file: .env
    volumes:
      - certs:/usr/share/kibana/config/certs/
    ports:
      - "${KIBANA_PORT}:${KIBANA_PORT}"
    extra_hosts:
      - "elasticsearch:${ES_IP}"
    networks: 
      velocistack:
        ipv4_address: ${KIBANA_IP}
    healthcheck:
      test: [ "CMD-SHELL", "curl http://${KIBANA_IP}:${KIBANA_PORT} -I -s | grep -q 'HTTP/1.1 302 Found'", ]
  prometheus:
    profiles: [ "velocistack", "grafana", "prometheus" ]
    build: prometheus
    image: prometheus:dev
    container_name: prometheus
    hostname: prometheus
    env_file: .env
    ports:
      - "9090:9090"
    #depends_on:
    #  - cadvisor
  grafana:
    profiles: [ "velocistack", "grafana" ]
    build: grafana
    image: grafana:dev
    container_name: grafana
    hostname: grafana
    env_file: .env
    ports:
      - "3000:3000"
    depends_on:
      - prometheus

# iris
#   profiles: [ "velocistack", "iris" ]

volumes:
  certs:
    name: certs
  logs:
    name: logs
  postgres:
    name: postgres
  web: 
    name: web
  shared:
    name: shared
  velociraptor_data:
    name: velociraptor_data
  velociraptor_api:
    name: velociraptor_api

networks:
  velocistack:
    name: velocistack
    ipam: 
      config: 
        - subnet: ${SUBNET}